[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "",
    "section": "",
    "text": "Code\n\n\n\n\nAlltime Athletics\nAn analysis of the all-time best performances in track and field, provided by Peter Larsson at Alltime Athletics."
  },
  {
    "objectID": "notebooks/world_records.html",
    "href": "notebooks/world_records.html",
    "title": "World Records",
    "section": "",
    "text": "Code\nimport altair as alt\nimport polars as pl\nfrom alltime_athletics_python.io import download_data, import_running_only_events\nfrom camminapy.plot.altair_config import altair_theme\n\nfrom alltime_athletics_viz.show import show_df\n\nalt.data_transformers.disable_max_rows()\naltair_theme()\n\n\n\n\nCode\n# if not os.path.exists(\"data\"):\n#     download_data()\ndf = import_running_only_events(\"../data\")\n\n\nLet’s first have another look at the world records that we have stored in our data frame.\n\n\nCode\nshow_df(\n    df.filter(pl.col(\"rank\") == 1)\n    .filter(pl.col(\"event type\") == \"standard\")\n    .select(\"event\", \"name\", \"result\", \"sex\")\n    .pivot(\n        index=\"event\",\n        values=[\"name\", \"result\"],\n        columns=\"sex\",\n        aggregate_function=\"first\",\n    )\n    .select(\n        \"event\",\n        \"name_sex_female\",\n        \"result_sex_female\",\n        \"name_sex_male\",\n        \"result_sex_male\",\n    )\n)\n\n\n\n\n\n\nevent\nname_sex_female\nresult_sex_female\nname_sex_male\nresult_sex_male\n\n\n\n\n0\n100 metres\nFlorence Griffith-Joyner\n10.49\nUsain Bolt\n9.58\n\n\n1\n100m/110m hurdles\nOluwatobiloba Amusan\n12.12\nAries Merritt\n12.80\n\n\n2\n200 metres\nFlorence Griffith-Joyner\n21.34\nUsain Bolt\n19.19\n\n\n3\n400 metres\nMarita Koch\n47.60\nWayde van Niekerk\n43.03\n\n\n4\n400m hurdles\nSydney McLaughlin\n50.68\nKarsten Warholm\n45.94\n\n\n5\n800 metres\nJarmila Kratochvílová\n1:53.28\nDavid Rudisha\n1:40.91\n\n\n6\n1500 metres\nFaith Kipyegon\n3:49.11\nHicham El Guerrouj\n3:26.00\n\n\n7\n1 Mile\nSifan Hassan\n4:12.33\nHicham El Guerrouj\n3:43.13\n\n\n8\n3000 metres\nWang Junxia\n8:06.11\nDaniel Komen\n7:20.67\n\n\n9\n3000m steeplechase\nBeatrice Chepkoech\n8:44.32\nSaif Saeed Shaheen\n7:53.63\n\n\n10\n5000 metres\nLetesenbet Gidey\n14:06.62\nJoshua Cheptegei\n12:35.36\n\n\n11\n10000 metres\nLetesenbet Gidey\n29:01.03\nJoshua Cheptegei\n26:11.00\n\n\n12\n20 km race walk\nYelena Lashmanova\n1:23:39\nYusuke Suzuki\n1:16:36\n\n\n13\nhalf-marathon\nLetesenbet Gidey\n62:52\nJacob Kiplimo\n57:31\n\n\n14\nmarathon\nBrigid Kosgei\n2:14:04\nEliud Kipchoge\n2:01:09\n\n\n15\n50 km race walk\nYelena Lashmanova\n3:50:42\nYohann Diniz\n3:32:33\n\n\n\n\n\nWe can also compute how the world records have progressed over time. This is shown in the interactive figure below. Click on the legend to select an event.\n\n\nCode\nworld_records = (\n    df.filter(pl.col(\"event\").str.contains(\"walk\") == False)\n    .filter(pl.col(\"event type\") == \"standard\")\n    .sort(\"sex\", \"distance\", \"event\", \"date of event\")\n    .with_columns(\n        pl.col(\"result seconds\")\n        .cummin()\n        .over(\"sex\", \"event\")\n        .alias(\"world record time\")\n    )\n    .filter(pl.col(\"result seconds\") == pl.col(\"world record time\"))\n    .groupby(\"sex\", \"event\", \"result seconds\", maintain_order=True)\n    .first()\n    .with_columns(\n        (\n            100\n            * pl.col(\"result seconds\")\n            / pl.col(\"result seconds\").min().over(\"sex\", \"event\")\n        ).alias(\"percent of wr\")\n    )\n)\n\nworld_records = pl.concat(\n    [\n        world_records,\n        world_records.filter(pl.col(\"rank\") == 1).with_columns(\n            [\n                pl.lit(\"2023-06-07\")\n                .str.strptime(pl.Date, format=\"%Y-%m-%d\")\n                .alias(\"date of event\"),\n                pl.lit(-1).cast(pl.Int64).alias(\"rank\"),\n            ]\n        ),\n    ]\n).with_columns(pl.col(\"sex\").apply(lambda s: s.title()))\n\nlegend_selection = alt.selection_point(fields=[\"event\"], bind=\"legend\")\nlegend_selection_empty = alt.selection_point(\n    fields=[\"event\"], bind=\"legend\", empty=False\n)\n\nbase = (\n    alt.Chart(world_records.to_pandas())\n    .encode(\n        x=alt.X(\"date of event:T\")\n        .scale(domain=(\"1950-01-01\", \"2026-01-01\"))\n        .title(\"Year\"),\n        y=alt.Y(\"percent of wr:Q\")\n        .scale(domain=(100, 110))\n        .axis(values=list(range(100, 120, 2)))\n        .title(\"Time in % of current WR\"),\n        color=alt.Color(\n            \"event:N\",\n            sort=world_records.sort(\"distance\")[\"event\"]\n            .unique(maintain_order=True)\n            .to_list(),\n        ).scale(scheme=\"dark2\"),\n        # strokeDash=\"sex:N\",\n        opacity=alt.condition(legend_selection, alt.value(1), alt.value(0)),\n    )\n    .properties(width=1400, height=500)\n    .add_params(legend_selection)\n    .add_params(legend_selection_empty)\n)\n\nbase_no_endpoint = base.transform_filter(alt.datum[\"rank\"] &gt; 0)\n\ntext = base_no_endpoint.encode(\n    text=\"name:N\",\n    opacity=alt.condition(legend_selection_empty, alt.value(0.9), alt.value(0.0)),\n)\n\n\nalt.layer(\n    base.mark_line(interpolate=\"step-after\", clip=True, strokeWidth=3),\n    base_no_endpoint.mark_point(filled=True, clip=True, size=100),\n    text.mark_text(clip=True, fontSize=14, angle=270 + 45, align=\"left\", dx=15),\n).facet(\n    row=alt.Row(\"sex:N\").title(\"\").header(labelAngle=0),\n    title=\"World Record Progression\",\n).resolve_scale(\n    x=\"independent\"\n)\n\n\n\n\n\n\n\n\nLet’s also have a look at the performances that were holding the world record label for the longest time, grouped by each event. Here’s the data for male performances.\n\n\nCode\nshow_df(\n    world_records.with_columns(\n        pl.col(\"date of event\")\n        .shift_and_fill(\n            periods=-1,\n            fill_value=pl.lit(\"2023-06-05\").str.strptime(pl.Date, format=\"%Y-%m-%d\"),\n        )\n        .over(\"sex\", \"event\")\n        .alias(\"wr valid until\")\n    )\n    .with_columns(\n        (pl.col(\"wr valid until\") - pl.col(\"date of event\")).alias(\"wr duration\")\n    )\n    .filter(pl.col(\"sex\") == \"Male\")\n    # .filter(pl.col(\"event\") == \"marathon\")\n    .drop(\"has hurdles\", \"event type\", \"distance\", \"on track\")\n    .filter(pl.col(\"wr duration\") == pl.col(\"wr duration\").max().over(\"sex\", \"event\"))\n    .sort(\"wr duration\")\n    .select(\"event\", \"name\", \"result\", \"wr duration\")\n    .sort(\"wr duration\")\n)\n\n\n\n\n\n\nevent\nname\nresult\nwr duration\n\n\n\n\n0\nhalf-marathon\nZersenay Tadese\n58:23\n3143 days\n\n\n1\nmarathon\nDerek Clayton\n2:08:34\n4573 days\n\n\n2\n100m/110m hurdles\nColin Jackson\n12.91\n4708 days\n\n\n3\n100 metres\nJim Hines\n9.95A\n5375 days\n\n\n4\n10000 metres\nKenenisa Bekele\n26:17.53\n5521 days\n\n\n5\n800 metres\nSebastian Coe\n1:41.73\n5908 days\n\n\n6\n5000 metres\nKenenisa Bekele\n12:37.35\n5919 days\n\n\n7\n200 metres\nPietro Mennea\n19.72A\n6129 days\n\n\n8\n3000m steeplechase\nSaif Saeed Shaheen\n7:53.63\n6851 days\n\n\n9\n400 metres\nLee Evans\n43.86A\n7243 days\n\n\n10\n1 Mile\nHicham El Guerrouj\n3:43.13\n8736 days\n\n\n11\n1500 metres\nHicham El Guerrouj\n3:26.00\n9094 days\n\n\n12\n3000 metres\nDaniel Komen\n7:20.67\n9775 days\n\n\n13\n400m hurdles\nKevin Young\n46.78\n10556 days\n\n\n\n\n\nAnd here for female performances.\n\n\nCode\nshow_df(\n    world_records.with_columns(\n        pl.col(\"date of event\")\n        .shift_and_fill(\n            periods=-1,\n            fill_value=pl.lit(\"2023-06-05\").str.strptime(pl.Date, format=\"%Y-%m-%d\"),\n        )\n        .over(\"sex\", \"event\")\n        .alias(\"wr valid until\")\n    )\n    .with_columns(\n        (pl.col(\"wr valid until\") - pl.col(\"date of event\")).alias(\"wr duration\")\n    )\n    .filter(pl.col(\"sex\") == \"Female\")\n    # .filter(pl.col(\"event\") == \"marathon\")\n    .drop(\"has hurdles\", \"event type\", \"distance\", \"on track\")\n    .filter(pl.col(\"wr duration\") == pl.col(\"wr duration\").max().over(\"sex\", \"event\"))\n    .sort(\"wr duration\")\n    .select(\"event\", \"name\", \"result\", \"wr duration\")\n    .sort(\"wr duration\")\n)\n\n\n\n\n\n\nevent\nname\nresult\nwr duration\n\n\n\n\n0\n3000m steeplechase\nGulnara Galkina\n8:58.81\n2932 days\n\n\n1\n5000 metres\nTirunesh Dibaba\n14:11.15\n4506 days\n\n\n2\nhalf-marathon\nIngrid Kristiansen\n66:40@\n5110 days\n\n\n3\n400m hurdles\nYuliya Pechonkina\n52.34\n5833 days\n\n\n4\nmarathon\nPaula Radcliffe\n2:15:25\n6027 days\n\n\n5\n1500 metres\nQu Yunxia\n3:50.46\n7979 days\n\n\n6\n1 Mile\nSvetlana Masterkova\n4:12.56\n8367 days\n\n\n7\n10000 metres\nWang Junxia\n29:31.78\n8374 days\n\n\n8\n100m/110m hurdles\nYordanka Donkova\n12.21\n10198 days\n\n\n9\n3000 metres\nWang Junxia\n8:06.11\n10859 days\n\n\n10\n200 metres\nFlorence Griffith-Joyner\n21.34\n12669 days\n\n\n11\n100 metres\nFlorence Griffith-Joyner\n10.49\n12744 days\n\n\n12\n400 metres\nMarita Koch\n47.60\n13758 days\n\n\n13\n800 metres\nJarmila Kratochvílová\n1:53.28\n14561 days\n\n\n\n\n\nLet’s see who has broken a world record the most number of times.\n\n\nCode\nshow_df(world_records.groupby(\"name\").count().sort(\"count\").filter(pl.col(\"count\") &gt; 3))\n\n\n\n\n\n\nname\ncount\n\n\n\n\n0\nMary Slaney\n4\n\n\n1\nMoses Kiptanui\n4\n\n\n2\nNoureddine Morceli\n4\n\n\n3\nIrena Szewinska\n4\n\n\n4\nSaïd Aouita\n4\n\n\n5\nWang Junxia\n4\n\n\n6\nPaul Tergat\n4\n\n\n7\nEdwin Moses\n4\n\n\n8\nFlorence Griffith-Joyner\n4\n\n\n9\nHicham El Guerrouj\n4\n\n\n10\nAnders Gärderud\n4\n\n\n11\nJoshua Cheptegei\n4\n\n\n12\nSteve Ovett\n4\n\n\n13\nDavid Rudisha\n4\n\n\n14\nTatyana Kazankina\n5\n\n\n15\nRon Clarke\n5\n\n\n16\nHenry Rono\n5\n\n\n17\nSydney McLaughlin\n5\n\n\n18\nLetesenbet Gidey\n6\n\n\n19\nSebastian Coe\n6\n\n\n20\nIngrid Kristiansen\n6\n\n\n21\nUsain Bolt\n7\n\n\n22\nHaile Gebrselassie\n10\n\n\n23\nMarita Koch\n11\n\n\n\n\n\nBesides world records, we can check which athletes have the most performances in the top 20, grouped by event.\n\n\nCode\n(\n    df.filter(pl.col(\"event type\") == \"standard\")\n    .filter(~pl.col(\"event\").str.contains(\"walk\"))\n    .sort(\"distance\")\n    .groupby(\"sex\", \"event\", maintain_order=True)\n    .head(20)\n    .groupby(\"sex\", \"event\", \"name\", maintain_order=True)\n    .count()\n    .sort(\"count\")\n    .groupby(\"sex\", \"event\", maintain_order=True)\n    .last()\n    .pivot(\n        index=\"event\",\n        columns=\"sex\",\n        values=[\"name\", \"count\"],\n        aggregate_function=\"first\",\n    )\n    .select(\n        [\n            \"event\",\n            \"name_sex_female\",\n            \"count_sex_female\",\n            \"name_sex_male\",\n            \"count_sex_male\",\n        ]\n    )\n)\n\n\n\nshape: (14, 5)\n\n\n\nevent\nname_sex_female\ncount_sex_female\nname_sex_male\ncount_sex_male\n\n\nstr\nstr\nu32\nstr\nu32\n\n\n\n\n\"100 metres\"\n\"Shelly-Ann Fra…\n9\n\"Usain Bolt\"\n7\n\n\n\"100m/110m hurd…\n\"Yordanka Donko…\n5\n\"Dayron Robles\"\n4\n\n\n\"200 metres\"\n\"Elaine Thompso…\n3\n\"Usain Bolt\"\n7\n\n\n\"400 metres\"\n\"Marita Koch\"\n6\n\"Michael Johnso…\n5\n\n\n\"400m hurdles\"\n\"Sydney McLaugh…\n8\n\"Rai Benjamin\"\n6\n\n\n\"800 metres\"\n\"Caster Semenya…\n4\n\"David Rudisha\"\n10\n\n\n\"1500 metres\"\n\"Faith Kipyegon…\n8\n\"Hicham El Guer…\n10\n\n\n\"1 Mile\"\n\"Sifan Hassan\"\n3\n\"Hicham El Guer…\n8\n\n\n\"3000 metres\"\n\"Ma Liyan\"\n2\n\"Haile Gebrsela…\n4\n\n\n\"3000m steeplec…\n\"Beatrice Chepk…\n6\n\"Saif Saeed Sha…\n8\n\n\n\"5000 metres\"\n\"Almaz Ayana\"\n4\n\"Daniel Komen\"\n3\n\n\n\"10000 metres\"\n\"Sifan Hassan\"\n3\n\"Kenenisa Bekel…\n4\n\n\n\"half-marathon\"\n\"Joyciline Jepk…\n3\n\"Jacob Kiplimo\"\n3\n\n\n\"marathon\"\n\"Ruth Chepngeti…\n3\n\"Eliud Kipchoge…\n5\n\n\n\n\n\n\nLast, let’s check how many world records have been broken in each given year.\n\n\nCode\nalt.Chart(\n    world_records.with_columns(pl.col(\"date of event\").dt.year().alias(\"year of event\"))\n    .filter(pl.col(\"rank\") &gt; 0)\n    # .filter(pl.col(\"distance type\") == \"sprint\")\n    .groupby(\"year of event\", \"distance type\", maintain_order=True)\n    .count()\n    .to_pandas()\n).mark_bar().encode(\n    x=alt.X(\"year of event:N\").axis(values=list(range(1950, 2030, 10))),\n    y=\"count:Q\",\n    color=\"distance type:N\",\n)"
  },
  {
    "objectID": "notebooks/the_data.html",
    "href": "notebooks/the_data.html",
    "title": "The Data",
    "section": "",
    "text": "We’ll start this analysis by providing a basic overview of the data we have at hand."
  },
  {
    "objectID": "notebooks/the_data.html#credit",
    "href": "notebooks/the_data.html#credit",
    "title": "The Data",
    "section": "Credit",
    "text": "Credit\nAll data comes from Peter Larsson’s website Alltime Athletics and he deserves full credit for the collection that he curates. You should go and check out his website, it’s amazing!\nThe data is scraped and processed using alltime_athletics_python"
  },
  {
    "objectID": "notebooks/the_data.html#a-first-glance-at-the-data",
    "href": "notebooks/the_data.html#a-first-glance-at-the-data",
    "title": "The Data",
    "section": "A first glance at the data",
    "text": "A first glance at the data\nTo get an idea of the data that we will be dealing with, let’s have a look at the first ten rows of the data frame.\nIn total, we have over 170000 rows with 19 columns of data.\n\n\nCode\nimport altair as alt\nimport polars as pl\nfrom alltime_athletics_python.io import import_running_only_events\nfrom camminapy.plot.altair_config import altair_theme\n\nfrom alltime_athletics_viz.show import show_df\n\n# from alltime_athletics_python.io import download_data\n\n\nalt.data_transformers.disable_max_rows()\naltair_theme()\n\n# if not os.path.exists(\"data\"):\n#     download_data()\ndf = import_running_only_events(\"../data\")\n\n\n\n\nCode\nshow_df(df.head(10))\n\n\n\n\n\n\nevent\nevent type\ndistance\nsex\nrank\nrank in event\nname\nnationality\ndate of birth\nresult\nwind\nresult seconds\ndate of event\nlocation of event\ndistance type\nhas hurdles\non track\nfile\nage at event in years\n\n\n\n\n0\n100 metres\nstandard\n100.0\nfemale\n1\n1q1\nFlorence Griffith-Joyner\nUSA\n1959-12-21\n10.49\n±0.0\n10.49\n1988-07-16\nIndianapolis\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n28.589041\n\n\n1\n100 metres\nstandard\n100.0\nfemale\n2\n1\nElaine Thompson-Herah\nJAM\n1992-06-28\n10.54\n+0.9\n10.54\n2021-08-21\nEugene\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n29.167123\n\n\n2\n100 metres\nstandard\n100.0\nfemale\n3\n1rA\nShelly-Ann Fraser-Pryce\nJAM\n1986-12-27\n10.60\n+1.7\n10.60\n2021-08-26\nLausanne\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n34.687671\n\n\n3\n100 metres\nstandard\n100.0\nfemale\n4\n1\nFlorence Griffith-Joyner\nUSA\n1959-12-21\n10.61\n+1.2\n10.61\n1988-07-17\nIndianapolis\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n28.591781\n\n\n4\n100 metres\nstandard\n100.0\nfemale\n4\n1\nElaine Thompson-Herah\nJAM\n1992-06-28\n10.61\n-0.6\n10.61\n2021-07-31\nTokyo\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n29.109589\n\n\n5\n100 metres\nstandard\n100.0\nfemale\n6\n1q3\nFlorence Griffith-Joyner\nUSA\n1959-12-21\n10.62\n+1.0\n10.62\n1988-09-24\nSeoul\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n28.780822\n\n\n6\n100 metres\nstandard\n100.0\nfemale\n6\n1\nShelly-Ann Fraser-Pryce\nJAM\n1986-12-27\n10.62\n+0.4\n10.62\n2022-08-10\nMonaco\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n35.643836\n\n\n7\n100 metres\nstandard\n100.0\nfemale\n8\n1rA\nShelly-Ann Fraser-Pryce\nJAM\n1986-12-27\n10.63\n+1.3\n10.63\n2021-06-05\nKingston\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n34.463014\n\n\n8\n100 metres\nstandard\n100.0\nfemale\n9\n1\nCarmelita Jeter\nUSA\n1979-11-24\n10.64\n+1.2\n10.64\n2009-09-20\nShanghai\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n29.843836\n\n\n9\n100 metres\nstandard\n100.0\nfemale\n9\n2rA\nElaine Thompson-Herah\nJAM\n1992-06-28\n10.64\n+1.7\n10.64\n2021-08-26\nLausanne\nsprint\nFalse\nTrue\n../data/women/standard/100 metres/legal/0 all-time women's best 100m.csv\n29.180822\n\n\n\n\n\nWe have data from 36 events with different numbers of entries inside the database\n\n\nCode\npl.Config.set_tbl_rows(100)\nshow_df(\n    df.sort(\"distance\")\n    .groupby(\"event\", \"sex\", maintain_order=True)\n    .count()\n    .pivot(index=\"event\", columns=\"sex\", values=\"count\", aggregate_function=\"first\")\n    .fill_null(0)\n)\n\n\n\n\n\n\nevent\nfemale\nmale\n\n\n\n\n0\n60 metres\n2677\n3112\n\n\n1\n100 yards\n0\n107\n\n\n2\n100 metres\n2842\n3967\n\n\n3\n100m/110m hurdles\n1849\n8617\n\n\n4\n200 metres\n2303\n4278\n\n\n5\n200m hurdles\n0\n29\n\n\n6\n300 metres\n257\n522\n\n\n7\n400 metres\n3491\n4317\n\n\n8\n400m hurdles\n2694\n3870\n\n\n9\n600 metres\n122\n134\n\n\n10\n800 metres\n2123\n7823\n\n\n11\n1000 metres\n191\n261\n\n\n12\n1500 metres\n3081\n9632\n\n\n13\n1 Mile\n331\n5359\n\n\n14\n2000 metres\n133\n278\n\n\n15\n2000m steeplechase\n718\n402\n\n\n16\n3000 metres\n1310\n4053\n\n\n17\n3000m steeplechase\n26440\n9976\n\n\n18\n2 Miles\n148\n386\n\n\n19\nOne hour run\n0\n221\n\n\n20\n5000 metres\n4474\n8368\n\n\n21\n5000 metres track walk\n321\n0\n\n\n22\n10000 metres\n2318\n9490\n\n\n23\n10 km race walk\n443\n0\n\n\n24\n10km road\n974\n766\n\n\n25\n10000 meters track walk\n0\n495\n\n\n26\n15km road\n898\n1157\n\n\n27\n20 km race walk\n3727\n1483\n\n\n28\n20km road\n2063\n1753\n\n\n29\nhalf-marathon\n3015\n3145\n\n\n30\n25 000m track\n0\n78\n\n\n31\n30km road\n2995\n2696\n\n\n32\n30 000m track\n0\n61\n\n\n33\nmarathon\n4389\n4851\n\n\n34\n50 km race walk\n262\n1035\n\n\n35\n100km road\n0\n195\n\n\n\n\n\nHere’s how the data splits up among the sexes.\n\n\nCode\nshow_df(df.groupby(\"sex\").count())\n\n\n\n\n\n\nsex\ncount\n\n\n\n\n0\nmale\n102917\n\n\n1\nfemale\n76589\n\n\n\n\n\nThere is data from standard and special events.\nHere are the standard events.\n\n\nCode\nshow_df(\n    pl.DataFrame(\n        df.filter(pl.col(\"event type\") == \"standard\")[\"event\"].unique(\n            maintain_order=True\n        )\n    )\n)\n\n\n\n\n\n\nevent\n\n\n\n\n0\n100 metres\n\n\n1\n100m/110m hurdles\n\n\n2\n200 metres\n\n\n3\n400 metres\n\n\n4\n400m hurdles\n\n\n5\n800 metres\n\n\n6\n1500 metres\n\n\n7\n1 Mile\n\n\n8\n3000 metres\n\n\n9\n3000m steeplechase\n\n\n10\n5000 metres\n\n\n11\n10000 metres\n\n\n12\n20 km race walk\n\n\n13\nhalf-marathon\n\n\n14\nmarathon\n\n\n15\n50 km race walk\n\n\n\n\n\nAnd here are the counts for the standard and special events.\n\n\nCode\nshow_df(df.groupby(\"event type\").count())\n\n\n\n\n\n\nevent type\ncount\n\n\n\n\n0\nspecial\n24593\n\n\n1\nstandard\n154913\n\n\n\n\n\nLet’s finish off this basic inspection by checking whether the world records look correct.\n\n\nCode\nshow_df(\n    df.filter(pl.col(\"rank\") == 1)\n    .filter(pl.col(\"event type\") == \"standard\")\n    .select(\"event\", \"name\", \"result\", \"sex\")\n    .pivot(\n        index=\"event\",\n        values=[\"name\", \"result\"],\n        columns=\"sex\",\n        aggregate_function=\"first\",\n    )\n    .select(\n        \"event\",\n        \"name_sex_female\",\n        \"result_sex_female\",\n        \"name_sex_male\",\n        \"result_sex_male\",\n    )\n)\n\n\n\n\n\n\nevent\nname_sex_female\nresult_sex_female\nname_sex_male\nresult_sex_male\n\n\n\n\n0\n100 metres\nFlorence Griffith-Joyner\n10.49\nUsain Bolt\n9.58\n\n\n1\n100m/110m hurdles\nOluwatobiloba Amusan\n12.12\nAries Merritt\n12.80\n\n\n2\n200 metres\nFlorence Griffith-Joyner\n21.34\nUsain Bolt\n19.19\n\n\n3\n400 metres\nMarita Koch\n47.60\nWayde van Niekerk\n43.03\n\n\n4\n400m hurdles\nSydney McLaughlin\n50.68\nKarsten Warholm\n45.94\n\n\n5\n800 metres\nJarmila Kratochvílová\n1:53.28\nDavid Rudisha\n1:40.91\n\n\n6\n1500 metres\nFaith Kipyegon\n3:49.11\nHicham El Guerrouj\n3:26.00\n\n\n7\n1 Mile\nSifan Hassan\n4:12.33\nHicham El Guerrouj\n3:43.13\n\n\n8\n3000 metres\nWang Junxia\n8:06.11\nDaniel Komen\n7:20.67\n\n\n9\n3000m steeplechase\nBeatrice Chepkoech\n8:44.32\nSaif Saeed Shaheen\n7:53.63\n\n\n10\n5000 metres\nLetesenbet Gidey\n14:06.62\nJoshua Cheptegei\n12:35.36\n\n\n11\n10000 metres\nLetesenbet Gidey\n29:01.03\nJoshua Cheptegei\n26:11.00\n\n\n12\n20 km race walk\nYelena Lashmanova\n1:23:39\nYusuke Suzuki\n1:16:36\n\n\n13\nhalf-marathon\nLetesenbet Gidey\n62:52\nJacob Kiplimo\n57:31\n\n\n14\nmarathon\nBrigid Kosgei\n2:14:04\nEliud Kipchoge\n2:01:09\n\n\n15\n50 km race walk\nYelena Lashmanova\n3:50:42\nYohann Diniz\n3:32:33\n\n\n\n\n\nThis does indeed look right and even includes the most recent world record over the 1500m by Faith Kipyegon."
  }
]
